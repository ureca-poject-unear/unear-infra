services:
  user-backend:
    build:
      context: ./unear-user-backend
      dockerfile: Dockerfile
    container_name: user-backend
    ports:
      - "${USER_BACKEND_PORT}:8080"
    networks:
      - unear-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  pos-backend:
    build:
      context: ./unear-pos-backend
      dockerfile: Dockerfile
    container_name: pos-backend
    ports:
      - "${POS_BACKEND_PORT}:8081"
    networks:
      - unear-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  admin-backend:
    build:
      context: ./unear-admin-backend
      dockerfile: Dockerfile
    container_name: admin-backend
    ports:
      - "${ADMIN_BACKEND_PORT}:8082"
    networks:
      - unear-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./unear-frontend
      dockerfile: Dockerfile
    container_name: unear-frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./unear-frontend:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-container
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - unear-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis_data:

networks:
  unear-network: