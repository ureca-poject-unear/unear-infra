services:
  user-backend:
    build:
      context: ./unear-user-backend
      dockerfile: Dockerfile
    container_name: user-backend
    ports:
      - "${USER_BACKEND_PORT}:8080"
    networks:
      - unear-network
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  pos-backend:
    build:
      context: ./unear-pos-backend
      dockerfile: Dockerfile
    container_name: pos-backend
    ports:
      - "${POS_BACKEND_PORT}:8081"
    networks:
      - unear-network
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  admin-backend:
    build:
      context: ./unear-admin-backend
      dockerfile: Dockerfile
    container_name: admin-backend
    ports:
      - "${ADMIN_BACKEND_PORT}:8082"
    networks:
      - unear-network
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./unear-frontend
      dockerfile: Dockerfile
    container_name: unear-frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./unear-frontend:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    restart: unless-stopped

  postgis:
    image: postgis/postgis:15-3.3
    container_name: postgis-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgis_data:/var/lib/postgresql/data
      - ./postgre/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - unear-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis-container
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - unear-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgis_data:
  redis_data:

networks:
  unear-network: