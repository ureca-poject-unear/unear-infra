x-spring-env: &spring-env
  SPRING_PROFILES_ACTIVE: docker
  # DB (모든 백엔드 공통)
  DB_HOST: ${DB_HOST}
  DB_PORT: ${DB_PORT}
  DB_NAME: ${DB_NAME}
  DB_USERNAME: ${DB_USERNAME}
  DB_PASSWORD: ${DB_PASSWORD}
  # Redis
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  # Mail
  MAIL_HOST: ${MAIL_HOST}
  MAIL_PORT: ${MAIL_PORT}
  MAIL_USERNAME: ${MAIL_USERNAME}
  MAIL_PASSWORD: ${MAIL_PASSWORD}
  # Internal/URL
  INTERNAL_KEY: ${INTERNAL_KEY}
  USER_SERVICE_URL: ${USER_SERVICE_URL}
  # JWT
  JWT_SECRET: ${JWT_SECRET}
  # OAuth2 (필요한 서비스에서만 사용됨)
  GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
  GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
  GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
  KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
  KAKAO_CLIENT_SECRET: ${KAKAO_CLIENT_SECRET}
  KAKAO_REDIRECT_URI: ${KAKAO_REDIRECT_URI}
  NAVER_CLIENT_ID: ${NAVER_CLIENT_ID}
  NAVER_CLIENT_SECRET: ${NAVER_CLIENT_SECRET}
  NAVER_REDIRECT_URI: ${NAVER_REDIRECT_URI}


services:
  user-backend:
    build:
      context: ./unear-user-backend
      dockerfile: Dockerfile
    container_name: user-backend
    ports:
      - "${USER_BACKEND_PORT}:8080"
    networks: [unear-network]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    environment: *spring-env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  pos-backend:
    build:
      context: ./unear-pos-backend
      dockerfile: Dockerfile
    container_name: pos-backend
    ports:
      - "${POS_BACKEND_PORT}:8080"
    networks: [unear-network]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    environment: *spring-env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  admin-backend:
    build:
      context: ./unear-admin-backend
      dockerfile: Dockerfile
    container_name: admin-backend
    ports:
      - "${ADMIN_BACKEND_PORT}:8080"
    networks: [unear-network]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    environment: *spring-env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-container
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    env_file:
      - ./.env
    volumes:
      - redis_data:/data
    networks: [unear-network]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    platform: linux/arm64/v8
    container_name: postgres-container
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks: [unear-network]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 30s
      timeout: 10s
      retries: 5


volumes:
  redis_data:
  postgres_data:

networks:
  unear-network: